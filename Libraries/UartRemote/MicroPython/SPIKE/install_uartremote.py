import ubinascii, uos, machine
b64="""
"""


uartremote=ubinascii.a2b_base64(b64)

try:
    uos.remove('/projects/uartremote.py')
    uos.remove('/projects/uartremote.mpy')
except OSError:
    pass

print('writing uartremote.mpy to folder /projects')
print('writing uartremote.mpy to folder /projects')
f=open('/projects/uartremote.mpy','wb')
f.write(uartremote)
f.close()
print('Finished writing uartremote.mpy. Resetting.')
machine.reset()
