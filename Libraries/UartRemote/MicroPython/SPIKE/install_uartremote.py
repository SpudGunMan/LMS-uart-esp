import ubinascii, uos, machine,uhashlib
from ubinascii import hexlify
b64="""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
"""

def calc_hash(b):
    return hexlify(uhashlib.sha256(uartremote).digest()).decode()

# this is the hash of the compiled uartremote.mpy
hash_gen='41bb109da9b54dfa0044563b900d55293cdc5cb0a60cba3cca760de76c7267c8'

uartremote=ubinascii.a2b_base64(b64)
hash_initial=calc_hash(uartremote)

try: # remove any old versions of uartremote library
    uos.remove('/projects/uartremote.py')
    uos.remove('/projects/uartremote.mpy')
except OSError:
    pass

print('writing uartremote.mpy to folder /projects')
with open('/projects/uartremote.mpy','wb') as f:
    f.write(uartremote)
print('Finished writing uartremote.mpy.')
print('Checking hash.')
uartremote_check=open('/projects/uartremote.mpy','rb').read()
hash_check=calc_hash(uartremote_check)

print('Hash generated: ',hash_gen)
error=False
if hash_initial != hash_gen:
    print('Failed hash of base64 input : '+hash_initial)
    error=True
if hash_check != hash_gen:
    print('Failed hash of .mpy on SPIKE: '+hash_check)
    error=True

if not error:
    print('Uartremote library written succesfully. Resetting....')
    machine.reset()
else:
    print('Failure in Uartremote library!')

