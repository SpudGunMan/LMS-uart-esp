"""

def led(v):
    print('led')
    for i in v:
        print(i)
    
def imu():
    return('f',[12.3,11.1,180.0])

def grideye(v):
    addr=v[0]
    a=[20,21,22,23,24,25,26,27,28]
    return('b',a[addr%9])

from uartfast import *
u=UartRemote(0)
u.add_command("led",led)
u.add_command("imu",imu)
u.add_command("grid",grideye)
"""


"""
from pybricks.iodevices import self.UARTDevice
from pybricks.parameters import Port
import struct

self.uart = self.UARTDevice(Port.S1,baudrate=115200)

def encode(n,t,data):
    s=struct.pack("b",n)
    s+=t.encode('utf-8')
    for i in data:
        s+=struct.pack(t,i)
    return(s)

self.uart.write(encode(4,'b',[1,100,0,0]))


n=0
for i in range(1000):
    q=send_receive(4,'b',[n%8,100,100,0])
    q=send_receive(4,'b',[n%8,0,0,0])
    n+=1

"""



"""
np=[]

    if PLATFORM=="ESP8266":
        import neopixel
        np = neopixel.NeoPixel(Pin(4), 8)



    def led(s):
        global np
        n=s[0]
        np[n]=(s[1],s[2],s[3])
        np.write()




t=resp[0]
data=resp[1]
n=len(data)
 
"""


"""
import time

u=UartFast(2)
u.add_command("led",led)
u.add_command("imu",imu)
u.add_command("gri",grideye)

t_old=time.ticks_ms()+2000
q=u.flush()
while True:
    if u.available():
        u.wait_for_command()
    if time.ticks_ms()-t_old>1000:
        t_old=time.ticks_ms()
        print("send led")
        print("recv=",u.send_receive('led','b',[1,2,3,4]))



u=UartFast(2)
u.add_command("led",led)
u.add_command("imu",imu)
u.add_command("gri",grideye)

t_old=time.ticks_ms()+2000
q=u.flush()
while True:
    if u.available():
        u.wait_for_command()
    if time.ticks_ms()-t_old>1000:
        t_old=time.ticks_ms()
        print("send imu")
        print("recv=",u.send_receive('imu','b',[]))




from uartfast import *
u=UartFast(Port.S1)
u.add_command('acc')

"""